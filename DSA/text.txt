class LinkedSeq {
    constructor() {
        this.head = null;
        this.current = null;
        this.size = 0; // Number of elements in the sequence
    }

    start() {
        this.current = this.head;
    }

    isCurrent() {
        return this.current !== null;
    }

    advance() {
        if (!this.isCurrent()) {
            throw new Error("No current element to advance");
        }
        this.current = this.current.next;
    }

    removeCurrent() {
        if (!this.isCurrent()) {
            throw new Error("No current element to remove");
        }
        if (this.current === this.head) {
            this.head = this.current.next;
        } else {
            let prev = this.head;
            while (prev.next !== this.current) {
                prev = prev.next;
            }
            prev.next = this.current.next;
        }
        this.size--;
        this.current = this.current.next; // Move to the next element
    }

    addAfter(element) {
        const newNode = { data: element, next: null };
        if (this.head === null) {
            this.head = newNode;
            this.current = this.head;
        } else if (this.current) { // Ensure this.current is not null
            newNode.next = this.current.next;
            this.current.next = newNode;
            this.current = newNode;
        } else {
            throw new Error("No current element to add after");
        }
        this.size++;
    }

    addBefore(element) {
        const newNode = { data: element, next: null };
        if (this.head === null || this.current === this.head) {
            newNode.next = this.head;
            this.head = newNode;
            this.current = this.head;
        } else {
            let prev = this.head;
            while (prev.next !== this.current) {
                prev = prev.next;
            }
            newNode.next = this.current;
            prev.next = newNode;
        }
        this.size++;
    }

    getCurrent() {
        if (!this.isCurrent()) {
            throw new Error("No current element");
        }
        return this.current.data;
    }

    // Remove an element
    remove(value) {
        if (this.head === null) {
            return;
        }
        if (this.head.data === value) {
            this.head = this.head.next;
            this.size--;
            return;
        }
        let current = this.head;
        while (current.next !== null) {
            if (current.next.data === value) {
                current.next = current.next.next;
                this.size--;
                return;
            }
            current = current.next;
        }
    }

    // Print all items in the bag
    print() {
        let current = this.head;
        while (current !== null) {
            console.log(current.data);
            current = current.next;
        }
    }

    // Return the number of items in the bag
    getSize() {
        return this.size;
    }

    // Check if the linked list contains a value
    contains(value) {
        let current = this.head;
        while (current !== null) {
            if (current.data === value) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Search for an item based on its position in the bag
    searchByPosition(position) {
        if (position < 0 || position >= this.size) {
            throw new Error("Position out of range");
        }
        let current = this.head;
        for (let i = 0; i < position; i++) {
            current = current.next;
        }
        return current.data;
    }

    // Search for an item based on its data
    searchByData(value) {
        let current = this.head;
        while (current !== null) {
            if (current.data === value) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Return the number of times a value has repeated
    countOccurrences(value) {
        let count = 0;
        let current = this.head;
        while (current !== null) {
            if (current.data === value) {
                count++;
            }
            current = current.next;
        }
        return count;
    }

    // Return a random value from linked list
    grab() {
        if (this.size === 0) {
            throw new Error("No elements in the sequence");
        }
        let index = Math.floor(Math.random() * this.size);
        return this.searchByPosition(index);
    }

    // Remove the head node and copy its data to the node with the given value
    removeAndCopyHead(value) {
        if (this.head === null) {
            throw new Error("No elements in the sequence");
        }
        let headData = this.head.data;
        this.remove(value);
        this.start();
        this.addAfter(headData);
        return headData;
    }
}

// Example usage:
let seq = new LinkedSeq();
seq.addAfter(1);
seq.addAfter(2);
seq.addAfter(3);
seq.addAfter(2);

console.log("LinkedSeq contents:");
seq.start();
while (seq.isCurrent()) {
    console.log(seq.getCurrent());
    seq.advance();
}

console.log("LinkedSeq size:", seq.getSize());

console.log("Removing item 2");
seq.remove(2);

console.log("LinkedSeq contents after removal:");
seq.start();
while (seq.isCurrent()) {
    console.log(seq.getCurrent());
    seq.advance();
}

console.log("LinkedSeq size after removal:", seq.getSize());

console.log("Does LinkedSeq contain 2?", seq.contains(2));

console.log("Searching for item at position 2:", seq.searchByPosition(2));

console.log("Searching for item with data 2:", seq.searchByData(2));

console.log("Count of occurrences of '2':", seq.countOccurrences(2));

console.log("Grabbing a random item from the LinkedSeq:", seq.grab());

seq = new LinkedSeq();
seq.addAfter(1);
seq.addAfter(2);
seq.addAfter(3);

console.log("Before:");
seq.start();
while (seq.isCurrent()) {
    console.log(seq.getCurrent());
    seq.advance();
}

const removedValue = seq.removeAndCopyHead(3);
console.log("Removed value:", removedValue);

console.log("After:");
seq.start();
while (seq.isCurrent()) {
    console.log(seq.getCurrent());
    seq.advance();
}
======================================================================================

class Stack {
    constructor() {
      this.items = [];
    }
  
    // Push
    push(element) {
      this.items.push(element);
    }
  
    // Pop
    pop() {
      if (this.isEmpty()) {
        return "Underflow";
      }
      return this.items.pop();
    }
  
    // Peek
    peek() {
      return this.items[this.items.length - 1];
    }
  
    // Check if the stack is empty
    isEmpty() {
      return this.items.length === 0;
    }
  
    // Get the size of the stack
    size() {
      return this.items.length;
    }
  
    // Clear the stack
    clear() {
      this.items = [];
    }
  
    // Print the stack elements
    printStack() {
      let str = "";
      for (let i = 0; i < this.items.length; i++) {
        str += this.items[i] + " ";
      }
      return str.trim(); // Remove trailing space
    }
  
    // Check if parentheses, braces, and brackets are balanced
    isBalanced(expression) {
      const openingSymbols = "([{";
      const closingSymbols = ")]}";
      const stack = new Stack();
  
      for (let i = 0; i < expression.length; i++) {
        let char = expression[i];
        if (openingSymbols.includes(char)) {
          stack.push(char);
        } else if (closingSymbols.includes(char)) {
          if (stack.isEmpty()) {
            return false;
          }
          let top = stack.pop();
          if (closingSymbols.indexOf(char) !== openingSymbols.indexOf(top)) {
            return false; // Mismatched symbols
          }
        }
      }
  
      return stack.isEmpty(); // All symbols matched if stack is empty
    }
    // Convert an infix expression to postfix using a stack
    convertInfixToPostfix(expression) {
      const operators = "+-*/";
      const precedence = { "+": 1, "-": 1, "*": 2, "/": 2 };
      const stack = new Stack();
      let postfix = "";

      for (let char of expression) {
        if (char === "(") {
          stack.push(char);
        } else if (char === ")") {
          while (stack.peek() !== "(") {
            postfix += stack.pop();
          }
          stack.pop(); // Remove the "("
        } else if (operators.includes(char)) {
          while (!stack.isEmpty() && precedence[char] <= precedence[stack.peek()]) {
            postfix += stack.pop();
          }
          stack.push(char);
        } else {
          postfix += char;
        }
      }

      while (!stack.isEmpty()) {
        postfix += stack.pop();
      }

      return postfix;
    }
    // Evaluate a postfix expression using a stack
    function evaluatePostfix(expression) {
      const stack = new Stack();
      const operators = "+-*/";
      let number = "";
    
      for (let char of expression) {
        if (!operators.includes(char) && char !== ' ') {
          number += char;
        } else if (char === ' ' && number !== "") {
          stack.push(parseInt(number));
          number = "";
        } else if (operators.includes(char)) {
          if (number !== "") {
            stack.push(parseInt(number));
            number = "";
          }
          let b = stack.pop();
          let a = stack.pop();
          switch (char) {
            case "+":
              stack.push(a + b);
              break;
            case "-":
              stack.push(a - b);
              break;
            case "*":
              stack.push(a * b);
              break;
            case "/":
              stack.push(a / b);
              break;
          }
        }
      }
    
      if (number !== "") {
        stack.push(parseInt(number));
      }
    
      return stack.pop();
    }
  }
  
// Create a new stack instance
const stack = new Stack();

// Test stack operations
console.log(stack.isEmpty());      // true
stack.push(10);
stack.push(20);
stack.push(30);
console.log(stack.printStack());  // 10 20 30
console.log(stack.peek());        // 30
console.log(stack.size());        // 3
console.log(stack.pop());         // 30
console.log(stack.printStack());  // 10 20

// Test balanced expression check
console.log(stack.isBalanced("{[(])}"));   // false
console.log(stack.isBalanced("{[()]}"));   // true

// Test postfix expression evaluation and conversion back to postfix

const input2 = "2+3*4";
const postfix2 = stack.convertInfixToPostfix(input2);
console.log(`${input2} is converted to ${postfix2}`); //234*+
console.log(" ");
const input3 = "3+5*2";
const postfix3 = stack.convertInfixToPostfix(input3);
console.log(`${input3} is converted to ${postfix3}`); //352*+
console.log(" ");
const input4 = "3*(4+5)";
const postfix4 = stack.convertInfixToPostfix(input4);
console.log(`${input4} is converted to ${postfix4}`); //345+* 
================================================================================

function groupAnagrams(strs){
  const map=new Map();
  for (const str of strs){
    const key=str.split("").sort().join("");
    if(map.has(key)){
      map.get(key).push(str);
    }else{
      map.set(key,[str]);
    }
  }
  return Array.from(map.values());
}

console.log(groupAnagrams(["eat", "tea", "tan", "ate", "nat", "bat"])); 
console.log(groupAnagrams(["listen", "silent", "hello", "world", "banana"])); 
console.log(groupAnagrams(["abcd", "dcba", "efgh", "ghfe", "ijkl", "lkji"])); 
console.log('---------------------------------------------------------------');
function findMaxLength(arr) {
  const countMap={ 0: -1 }; 
  let maxLength=0;
  let currentSum = 0;

  for (let i = 0; i < arr.length; i++) {
    currentSum += arr[i] === 1?1:-1;

    if (countMap.hasOwnProperty(currentSum)) {
      maxLength =Math.max(maxLength,i - countMap[currentSum]);
    } else {
      countMap[currentSum] = i;
    }
  }

  return maxLength;
}

console.log(findMaxLength([0, 1, 0, 1, 0, 0, 1, 1])); //8
console.log(findMaxLength([0, 1, 1, 0, 1, 1, 1, 0])); //4
console.log(findMaxLength([1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1])); //10
console.log('---------------------------------------------------------------');

function lengthOfLongestSubstring(s) {
  let longest = 0;
  let start = 0;
  const seen = {}; 

  for (let i = 0; i < s.length; i++) {
    const char = s[i];
    if (seen[char] !== undefined && seen[char] >= start) {
      start = Math.max(start, seen[char] + 1);
    }

    seen[char] = i;

    longest = Math.max(longest, i - start + 1);
  }

  return longest;
}

console.log(lengthOfLongestSubstring("abcabcbb")); // 3
console.log(lengthOfLongestSubstring("bbbbb")); // 1
console.log(lengthOfLongestSubstring("pwwkew")); // 3
console.log('---------------------------------------------------------------');

function subarraySum(nums, k) {
  const countMap = {0:1}; 
  let subarrayCount = 0;
  let currentSum = 0;

  for (const num of nums) {
    currentSum += num;

    if (countMap.hasOwnProperty(currentSum-k)) {
      subarrayCount += countMap[currentSum-k];
    }

    countMap[currentSum] = (countMap[currentSum] || 0)+1;
  }

  return subarrayCount;
}

console.log(subarraySum([1, 1, 1],2)); // 2
console.log(subarraySum([1, 2, 3],3)); // 2
console.log(subarraySum([-1, -1, 1],0)); //1
console.log('---------------------------------------------------------------');

function groupStrings(strings) {
  const groups = {};

  for (const str of strings) {
    const shift = (str.charCodeAt(0) - "a"+26) % 26;
    const key = str.split("").map((char) =>
        String.fromCharCode(((char.charCodeAt(0) - "a"+shift) % 26)+"a")
      ).join("");

    if (!groups[key]) {
      groups[key]=[];
    }
    groups[key].push(str);
  }

  return Object.values(groups);
}

console.log(groupStrings(["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"])); 
console.log(groupStrings(["aaa", "bbb", "ccc", "ddd"])); 
console.log(groupStrings(["abc", "def", "ghi", "jkl"])); 
console.log('---------------------------------------------------------------');

=======================================================================================

function fourSumCount(A, B, C, D) {
  const map = new Map();
  for (let i = 0; i < A.length; i++) {
    for (let j = 0; j < B.length; j++) {
      const sum = A[i] + B[j];
      map.set(sum, (map.get(sum) || 0) + 1);
    }
  }

  let count = 0;
  for (let k = 0; k < C.length; k++) {
    for (let l = 0; l < D.length; l++) {
      const target = -(C[k] + D[l]);
      if (map.has(target)) {
        count += map.get(target);
      }
    }
  }

  return count;
}
console.log(fourSumCount([1, 2], [-2, -1], [-1, 2], [0, 2])); // 2
console.log(fourSumCount([0, 0], [0, 0], [0, 0], [0, 0])); // 16
console.log(fourSumCount([-1, -1], [-1,1], [-1,1], [1, -1])); // 6
console.log('---------------------------------------------------------------');

function lengthOfLongestSubstringKDistinct(s, k) {
  let maxLength = 0;
  let left = 0;
  const map = new Map();

  for (let right = 0; right < s.length; right++) {
    const char = s[right];
    map.set(char, (map.get(char) || 0) + 1);

    while (map.size > k) {
      const leftChar = s[left];
      map.set(leftChar, map.get(leftChar) - 1);
      if (map.get(leftChar) === 0) {
        map.delete(leftChar);
      }
      left++;
    }

    maxLength = Math.max(maxLength, right - left + 1);
  }

  return maxLength;
}
console.log(lengthOfLongestSubstringKDistinct("eceba", 2)); // 3
console.log(lengthOfLongestSubstringKDistinct("aa", 1)); // 2
console.log(lengthOfLongestSubstringKDistinct("abaccc", 2)); // 4
console.log('---------------------------------------------------------------');

function minWindow(s, t) {
  let tFreq = {}; 
  for (let char of t) {
    tFreq[char] = (tFreq[char] || 0) + 1;
  }

  let left = 0;
  let minLen = Infinity;
  let minWindow = "";
  let count = 0;

  for (let right = 0; right < s.length; right++) {
    let char = s[right];
    if (char in tFreq) {
      tFreq[char]--;
      if (tFreq[char] >= 0) {
        count++;
      }
      while (count === t.length) {
        if (right - left + 1 < minLen) {
          minLen = right - left + 1;
          minWindow = s.substring(left, right + 1);
        }
        let leftChar = s[left];
        if (leftChar in tFreq) {
          tFreq[leftChar]++;
          if (tFreq[leftChar] > 0) {
            count--;
          }
        }
        left++;
      }
    }
  }
  return minWindow;
}

// Example usage:
console.log(minWindow("ADOBECODEBANC", "ABC")); //"BANC"
console.log(minWindow("a", "a")); //"a"
console.log(minWindow("aa", "aa")); //"aa"
console.log('---------------------------------------------------------------');
function topKFrequent(nums, k) {
    const freqMap = new Map();
    for (const num of nums) {
        freqMap.set(num, (freqMap.get(num) || 0) + 1);
    }

    const sortedNums = [...freqMap.keys()].sort((a, b) => freqMap.get(b) - freqMap.get(a));

    return sortedNums.slice(0, k);
}

// Example usage:
console.log(topKFrequent([1, 1, 1, 2, 2, 3], 2)); //[1, 2]
console.log(topKFrequent([1], 1)); //[1]
console.log(topKFrequent([4, 1, -1, 2, -1, 2, 3], 2)); //[-1, 2]
console.log('---------------------------------------------------------------');

=======================================================================================

function maximumRobots(chargeTimes, runningCosts, budget) {
  let n = chargeTimes.length;
  let maxConsecutive = 0;
  let sumRunningCosts = 0;
  let queue = []; // queue to keep track of maximum charging time

  let j = 0; // start of the sliding window
  for (let i = 0; i < n; i++) {
    // add the current robot's running cost to the total
    sumRunningCosts += runningCosts[i];

    while (queue.length && chargeTimes[i] > chargeTimes[queue[queue.length - 1]]) {
      queue.pop();
    }
    if (chargeTimes[i] + sumRunningCosts <= budget) {
      queue.push(i);
    }

    // if the total cost exceeds the budget, move the start of the sliding window
    while (chargeTimes[queue[0]] + (i - j + 1) * sumRunningCosts > budget) {
      sumRunningCosts -= runningCosts[j];
      if (queue[0] === j) queue.shift();
      j++;
    }

    // update the maximum number of consecutive robots
    if (chargeTimes[queue[0]] + (i - j + 1) * sumRunningCosts <= budget) {
      maxConsecutive = Math.max(maxConsecutive, i - j + 1);
    }
  }

  return maxConsecutive;
}

// Test case
const chargeTimes = [3, 6, 1, 3, 4];
const runningCosts = [2, 1, 3, 4, 5];
const budget = 25;

const chargeTimes1 = [3, 5, 2, 4];
const runningCosts1 = [4, 3, 2, 1];
const budget1 = 5;

const chargeTimes2 = [9, 2, 3, 4, 5];
const runningCosts2 = [5, 4, 3, 2, 1];
const budget2 = 307;

const result1 = maximumRobots(chargeTimes1, runningCosts1, budget1);
console.log(result1); // Output: 0
const result = maximumRobots(chargeTimes, runningCosts, budget);
console.log(result); // Output: 3
const result2 = maximumRobots(chargeTimes2, runningCosts2, budget2);
console.log(result2); // Output: 5

====================================================================================

//a function that finds contiguous subarray with the largest sum and return sum
function maxSubarray(nums) {
  let maxSum = nums[0];
  let currentSum = nums[0];
  for (let i = 1; i < nums.length; i++) {
    currentSum = Math.max(nums[i], currentSum + nums[i]);
    maxSum = Math.max(maxSum, currentSum);
  }
  return maxSum;
}

//function to find length of longest common subsequence
function longestCommonSubsequence(str1,str2){
    let m = str1.length;
    let n = str2.length;
    let dp = new Array(m+1).fill(0).map(()=>new Array(n+1).fill(0));
    for(let i=1;i<=m;i++){
        for(let j=1;j<=n;j++){
            if(str1[i-1] === str2[j-1]){
                dp[i][j] = 1+dp[i-1][j-1];
            }else{
                dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[m][n];
    
}
function longestIncreasingSubsequence(nums) {
    let n = nums.length;
    let dp = new Array(n).fill(1);
    for (let i = 1; i < n; i++) {
        for (let j = 0; j < i; j++) {
            if (nums[i] > nums[j]) {
                dp[i] = Math.max(dp[i], dp[j] + 1);
            }
        }
    }
    return Math.max(...dp);
}
function longestIncreasingSubarray(nums) {
    let maxLen = 1;
    let currentLen = 1;
    for (let i = 1; i < nums.length; i++) {
        if (nums[i] > nums[i - 1]) {d
            currentLen++;
            maxLen = Math.max(maxLen, currentLen);
        } else {
            currentLen = 1;
        }
    }
    return maxLen;
}

============================================================================================

function TreeNode(val) {
    this.val = val;
    this.left = this.right = null;
}
function larget(root) {
    if (root === null) return [];
    return [...inorderTraversal(root.left), root.val, ...inorderTraversal(root.right)];
}
function largestValue(root) {
    if (!root) return [];
    const result = [];
    const queue = [root];
    while (queue.length) {
        let max = Number.MIN_SAFE_INTEGER;
        for (let i = 0, len = queue.length; i < len; i++) {
            const node = queue.shift();
            max = Math.max(max, node.val);
            if (node.left) queue.push(node.left);
            if (node.right) queue.push(node.right);
        }
        result.push(max);
    }
    return result;
}
function getHeight(root) {
    if (root==null) return -1;
    else if (root.left == null && root.right==null) return 0;
    else {
        let leftHeight = getHeight(root.left);
        let rightHeight = getHeight(root.right);
        return 1 + Math.max(leftHeight, rightHeight);
    }
}


function arrayToBinaryTree(data) {
    if (!data.length) return null;
    const root = new TreeNode(data[0]);
    const queue = [root];
    let i = 1;
    while (queue.length && i < data.length) {
        const current = queue.shift();
        if (data[i] !== null) {
            current.left = new TreeNode(data[i]);
            queue.push(current.left);
        }
        i++;
        if (i < data.length && data[i] !== null) {
            current.right = new TreeNode(data[i]);
            queue.push(current.right);
        }
        i++;
    }
    return root;
}
// Test data
let data = [1, 2, 3, 4, 5, null, null, null, null, 10, 15];

// Convert array to binary tree
let root = arrayToBinaryTree(data);

// Calculate height of the binary tree
let height = getHeight({index: 0, array: data});

// Print the height
console.log(`The height of the binary tree is ${height}`); //height = 4

===================================================================================

function solveNQueens(n) {
  const results = [];

  function isSafe(board, row, col) {
    for (let i = 0; i < col; i++) {
      if (board[row][i] === 'Q') return false;
    }
    for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {
      if (board[i][j] === 'Q') return false;
    }
    for (let i = row, j = col; i < n && j >= 0; i++, j--) {
      if (board[i][j] === 'Q') return false;
    }

    return true;
  }

  function solve(board, col) {
    if (col >= n) {
      results.push(board.map(row => row.join('')));
      return true;
    }

    let res = false;
    for (let i = 0; i < n; i++) {
      if (isSafe(board, i, col)) {
        board[i][col] = 'Q';
        res = solve(board, col + 1) || res;
        board[i][col] = '.'; // Backtrack: Remove queen if no solution found
      }
    }
    return res;
  }

  const board = Array.from({ length: n }, () => Array(n).fill('.'));
  solve(board, 0);
  results
  return results;
}

const n = 4;
const solutions = solveNQueens(n);
solutions.forEach(solution => {
  solution.forEach(row => console.log(row));
  console.log();
});

======================================================================================

function findAllPaths(matrix) {
    let N = matrix.length;
    let paths = [];
    let visited = Array.fill.map(() => Array(N).fill(false));
  
    function search(i, j, path) {
      if (i < 0 || i >= N || j < 0 || j >= N || visited[i][j] || matrix[i][j] === 0) return;
      if (i === N - 1 && j === N - 1) {
        paths.push(path);
        return;
      }
      visited[i][j] = true;
      search(i - 1, j, path + 'U'); // Up
      search(i, j - 1, path + 'L'); // Left
      search(i, j + 1, path + 'R'); // Right
      search(i + 1, j, path + 'D'); // Down
      visited[i][j] = false; // Backtrack
    }
  
    search(0, 0, '');
    return paths.sort();
}
  
  // Please don't modify the below code
  (function () {
    console.log(JSON.stringify(findAllPaths(eval(process.argv[2]))));
  })();
====================================================================================

function minCoins (coins, amount) {
    coins.sort((a, b)=> b-a);
    let coinCount = 0;
    if(amount<0)return -1;
    for(let i=0;i<coins.length;i++){           
        while (amount >= coins[i]){
            amount -= coins[i];
            coinCount++;
        }
        if(amount === 0)break;
    }
    return amount>0 ? -1:coinCount;
}
(function () {
console.log(minCoins (eval (process.argv[2]), parseInt(process.argv[3])));
})();
====================================================================================

function maxActivities(activities) {
    activities.sort((a, b) => a[1] - b[1]);

    let lastEndTime = -1;
    let count = 0;

    for (let i = 0; i < activities.length; i++) {
        if (activities[i][0] >= lastEndTime) {
            lastEndTime = activities[i][1]; 
            count++; 
        }
    }
    return count;
}
const activities =  [[1, 4], [3, 5], [0, 6], [5, 7], [8, 9]];
console.log(maxActivities(activities)); // Output: 3
===================================================================================